name: Docker Image CI

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: 'Docker image name'
        required: true
        type: choice
        options:
          - 'missaelcorm/schedulesync-api'
          - 'missaelcorm/schedulesync-web'
      docker_tag:
        description: 'Docker image tag'
        required: true
        default: 'latest'

permissions:
  contents: read
  security-events: write

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    env: 
      DOCKER_IMAGE: ${{ github.event.inputs.docker_image }}
      DOCKER_TAG: ${{ github.event.inputs.docker_tag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set Docker Context
      run: |
        if [ "${{ env.DOCKER_IMAGE }}" == "missaelcorm/schedulesync-api" ]; then
          echo "DOCKER_LOCAL_CONTEXT=backend" >> $GITHUB_ENV
        elif [ "${{ env.DOCKER_IMAGE }}" == "missaelcorm/schedulesync-web" ]; then
          echo "DOCKER_LOCAL_CONTEXT=frontend" >> $GITHUB_ENV
        fi

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5.3.0
      with:
        context: ./${{ env.DOCKER_LOCAL_CONTEXT }}
        file: ./${{ env.DOCKER_LOCAL_CONTEXT }}/Dockerfile
        push: true
        tags: "${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"

    - name: Send notification to Slack
      uses: ./.github/actions/slack-notify
      if: always()
      with:
        job_name: 'Build and Push Docker Image'
        job_status: ${{ job.status }}
        github_workflow: ${{ github.workflow}}
        repo_name: ${{ github.repository }}
        branch_name: ${{ github.ref }}
        commit_sha: ${{ github.sha }}
        slack_channel: '#notifications'
        slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  trivy_security_scan:
    runs-on: ubuntu-latest
    needs: [build_and_push]
    env: 
      DOCKER_IMAGE: ${{ github.event.inputs.docker_image }}
      DOCKER_TAG: ${{ github.event.inputs.docker_tag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      env:
        TRIVY_DB_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-db:2'
      with:
        image-ref: '${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}'
        format: 'json'
        output: 'trivy-results.json'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true

    - name: Upload Trivy scan results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: security-trivy-schedulesync-json-${{ github.sha }}
        path: trivy-results.json

    - name: Send notification to Slack
      uses: ./.github/actions/slack-notify
      if: always()
      with:
        job_name: 'Trivy Security Scan'
        job_status: ${{ job.status }}
        github_workflow: ${{ github.workflow}}
        repo_name: ${{ github.repository }}
        branch_name: ${{ github.ref }}
        commit_sha: ${{ github.sha }}
        slack_channel: '#notifications'
        slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  codeql_security_scan:
    runs-on: ubuntu-latest
    needs: [build_and_push]
    env: 
      DOCKER_IMAGE: ${{ github.event.inputs.docker_image }}
      DOCKER_TAG: ${{ github.event.inputs.docker_tag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'javascript'

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: 'codeql-${{ github.event.inputs.docker_image }}'
        output: 'codeql-results.sarif' # Explicit output for CodeQL

    - name: Upload CodeQL Results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: security-codeql-schedulesync-sarif-${{ github.sha }}
        path: codeql-results.sarif
        if-no-files-found: warn

    - name: Send notification to Slack
      uses: ./.github/actions/slack-notify
      if: always()
      with:
        job_name: 'CodeQL Security Scan'
        job_status: ${{ job.status }}
        github_workflow: ${{ github.workflow}}
        repo_name: ${{ github.repository }}
        branch_name: ${{ github.ref }}
        commit_sha: ${{ github.sha }}
        slack_channel: '#notifications'
        slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
